{"ast":null,"code":"import { ethers } from \"ethers\";\nimport JewelryCertificateABI from \"./JewelryCertificateABI.json\";\nexport const getContract = async () => {\n  // 使用 MetaMask 的 provider\n  if (!window.ethereum) {\n    throw new Error(\"MetaMask is not installed. Please install MetaMask to continue.\");\n  }\n  const provider = new ethers.providers.Web3Provider(window.ethereum);\n  try {\n    // 请求用户连接钱包\n    await provider.send(\"eth_requestAccounts\", []);\n\n    // 获取网络信息\n    const network = await provider.getNetwork();\n    console.log(\"Connected to Network:\", {\n      chainId: network.chainId,\n      name: network.name || \"unknown\"\n    });\n  } catch (error) {\n    console.error(\"Failed to connect to MetaMask or fetch network details:\", error);\n    throw error;\n  }\n\n  // 确认环境变量中合约地址是否正确\n  const contractAddress = process.env.REACT_APP_CONTRACT_ADDRESS;\n  if (!contractAddress) {\n    throw new Error(\"Contract address is not defined in the .env file.\");\n  }\n\n  // 使用签名者连接合约\n  const signer = provider.getSigner();\n  return new ethers.Contract(contractAddress, JewelryCertificateABI, signer);\n};","map":{"version":3,"names":["ethers","JewelryCertificateABI","getContract","window","ethereum","Error","provider","providers","Web3Provider","send","network","getNetwork","console","log","chainId","name","error","contractAddress","process","env","REACT_APP_CONTRACT_ADDRESS","signer","getSigner","Contract"],"sources":["/Users/sharb/Downloads/CCP_GPT_Adventure-main/frontend/src/contract.js"],"sourcesContent":["import { ethers } from \"ethers\";\nimport JewelryCertificateABI from \"./JewelryCertificateABI.json\";\n\nexport const getContract = async () => {\n  // 使用 MetaMask 的 provider\n  if (!window.ethereum) {\n    throw new Error(\"MetaMask is not installed. Please install MetaMask to continue.\");\n  }\n\n  const provider = new ethers.providers.Web3Provider(window.ethereum);\n\n  try {\n    // 请求用户连接钱包\n    await provider.send(\"eth_requestAccounts\", []);\n\n    // 获取网络信息\n    const network = await provider.getNetwork();\n    console.log(\"Connected to Network:\", {\n      chainId: network.chainId,\n      name: network.name || \"unknown\",\n    });\n  } catch (error) {\n    console.error(\"Failed to connect to MetaMask or fetch network details:\", error);\n    throw error;\n  }\n\n  // 确认环境变量中合约地址是否正确\n  const contractAddress = process.env.REACT_APP_CONTRACT_ADDRESS;\n  if (!contractAddress) {\n    throw new Error(\"Contract address is not defined in the .env file.\");\n  }\n\n  // 使用签名者连接合约\n  const signer = provider.getSigner();\n  return new ethers.Contract(contractAddress, JewelryCertificateABI, signer);\n};\n"],"mappings":"AAAA,SAASA,MAAM,QAAQ,QAAQ;AAC/B,OAAOC,qBAAqB,MAAM,8BAA8B;AAEhE,OAAO,MAAMC,WAAW,GAAG,MAAAA,CAAA,KAAY;EACrC;EACA,IAAI,CAACC,MAAM,CAACC,QAAQ,EAAE;IACpB,MAAM,IAAIC,KAAK,CAAC,iEAAiE,CAAC;EACpF;EAEA,MAAMC,QAAQ,GAAG,IAAIN,MAAM,CAACO,SAAS,CAACC,YAAY,CAACL,MAAM,CAACC,QAAQ,CAAC;EAEnE,IAAI;IACF;IACA,MAAME,QAAQ,CAACG,IAAI,CAAC,qBAAqB,EAAE,EAAE,CAAC;;IAE9C;IACA,MAAMC,OAAO,GAAG,MAAMJ,QAAQ,CAACK,UAAU,CAAC,CAAC;IAC3CC,OAAO,CAACC,GAAG,CAAC,uBAAuB,EAAE;MACnCC,OAAO,EAAEJ,OAAO,CAACI,OAAO;MACxBC,IAAI,EAAEL,OAAO,CAACK,IAAI,IAAI;IACxB,CAAC,CAAC;EACJ,CAAC,CAAC,OAAOC,KAAK,EAAE;IACdJ,OAAO,CAACI,KAAK,CAAC,yDAAyD,EAAEA,KAAK,CAAC;IAC/E,MAAMA,KAAK;EACb;;EAEA;EACA,MAAMC,eAAe,GAAGC,OAAO,CAACC,GAAG,CAACC,0BAA0B;EAC9D,IAAI,CAACH,eAAe,EAAE;IACpB,MAAM,IAAIZ,KAAK,CAAC,mDAAmD,CAAC;EACtE;;EAEA;EACA,MAAMgB,MAAM,GAAGf,QAAQ,CAACgB,SAAS,CAAC,CAAC;EACnC,OAAO,IAAItB,MAAM,CAACuB,QAAQ,CAACN,eAAe,EAAEhB,qBAAqB,EAAEoB,MAAM,CAAC;AAC5E,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}