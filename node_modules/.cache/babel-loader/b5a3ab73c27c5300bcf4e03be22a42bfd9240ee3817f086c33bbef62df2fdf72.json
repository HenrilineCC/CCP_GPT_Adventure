{"ast":null,"code":"var _jsxFileName = \"/Users/sharb/Downloads/CCP_GPT_Adventure-main/frontend/src/components/CreateCertificate.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport { getContract } from \"../contract\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction CreateCertificate() {\n  _s();\n  const [tokenId, setTokenId] = useState(\"\");\n  const [owner, setOwner] = useState(\"\");\n  const [status, setStatus] = useState(\"\");\n  const createCertificate = async () => {\n    if (!tokenId || isNaN(tokenId) || !owner) {\n      setStatus(\"Please enter a valid Token ID and Owner Address.\");\n      return;\n    }\n    try {\n      const contract = await getContract();\n      console.log(\"Contract instance:\", contract);\n      const tx = await contract.createCertificate(tokenId, owner);\n      console.log(\"Transaction sent:\", tx);\n      await tx.wait();\n      console.log(\"Transaction confirmed:\", tx);\n      setStatus(`Certificate ${tokenId} created successfully for ${owner}!`);\n    } catch (error) {\n      console.error(\"Error creating certificate:\", error.message || error);\n\n      // 处理重复 Token ID 错误\n      if (error.message.includes(\"Token ID already exists\")) {\n        setStatus(`Token ID ${tokenId} already exists. Cannot create.`);\n      } else if (error.message.includes(\"Not authorized\")) {\n        setStatus(\"You are not authorized to create certificates.\");\n      } else {\n        setStatus(`Failed to create certificate: ${error.message || error}`);\n      }\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"component\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Create Certificate\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      placeholder: \"Token ID\",\n      value: tokenId,\n      onChange: e => setTokenId(e.target.value)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      placeholder: \"Owner Address\",\n      value: owner,\n      onChange: e => setOwner(e.target.value)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: createCertificate,\n      children: \"Create\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: status\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 41,\n    columnNumber: 5\n  }, this);\n}\n_s(CreateCertificate, \"5TXhnXGIcYBYH0UrzjoClO0nYbU=\");\n_c = CreateCertificate;\nexport default CreateCertificate;\nvar _c;\n$RefreshReg$(_c, \"CreateCertificate\");","map":{"version":3,"names":["React","useState","getContract","jsxDEV","_jsxDEV","CreateCertificate","_s","tokenId","setTokenId","owner","setOwner","status","setStatus","createCertificate","isNaN","contract","console","log","tx","wait","error","message","includes","className","children","fileName","_jsxFileName","lineNumber","columnNumber","type","placeholder","value","onChange","e","target","onClick","_c","$RefreshReg$"],"sources":["/Users/sharb/Downloads/CCP_GPT_Adventure-main/frontend/src/components/CreateCertificate.js"],"sourcesContent":["import React, { useState } from \"react\";\nimport { getContract } from \"../contract\";\n\nfunction CreateCertificate() {\n  const [tokenId, setTokenId] = useState(\"\");\n  const [owner, setOwner] = useState(\"\");\n  const [status, setStatus] = useState(\"\");\n\n  const createCertificate = async () => {\n    if (!tokenId || isNaN(tokenId) || !owner) {\n      setStatus(\"Please enter a valid Token ID and Owner Address.\");\n      return;\n    }\n\n    try {\n      const contract = await getContract();\n      console.log(\"Contract instance:\", contract);\n\n      const tx = await contract.createCertificate(tokenId, owner);\n      console.log(\"Transaction sent:\", tx);\n\n      await tx.wait();\n      console.log(\"Transaction confirmed:\", tx);\n\n      setStatus(`Certificate ${tokenId} created successfully for ${owner}!`);\n    } catch (error) {\n      console.error(\"Error creating certificate:\", error.message || error);\n\n      // 处理重复 Token ID 错误\n      if (error.message.includes(\"Token ID already exists\")) {\n        setStatus(`Token ID ${tokenId} already exists. Cannot create.`);\n      } else if (error.message.includes(\"Not authorized\")) {\n        setStatus(\"You are not authorized to create certificates.\");\n      } else {\n        setStatus(`Failed to create certificate: ${error.message || error}`);\n      }\n    }\n  };\n\n  return (\n    <div className=\"component\">\n      <h2>Create Certificate</h2>\n      <input\n        type=\"text\"\n        placeholder=\"Token ID\"\n        value={tokenId}\n        onChange={(e) => setTokenId(e.target.value)}\n      />\n      <input\n        type=\"text\"\n        placeholder=\"Owner Address\"\n        value={owner}\n        onChange={(e) => setOwner(e.target.value)}\n      />\n      <button onClick={createCertificate}>Create</button>\n      <p>{status}</p>\n    </div>\n  );\n}\n\nexport default CreateCertificate;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}