{"ast":null,"code":"import { ethers } from \"ethers\";\nimport JewelryCertificateABI from \"./JewelryCertificateABI.json\";\nexport const getContract = async () => {\n  if (!window.ethereum) {\n    throw new Error(\"MetaMask is not installed. Please install it to use this feature.\");\n  }\n\n  // 连接到本地 JSON-RPC 提供程序\n  const provider = new ethers.providers.JsonRpcProvider(\"http://127.0.0.1:8545\");\n  try {\n    const network = await provider.getNetwork();\n    console.log(\"Connected to Network:\", {\n      chainId: network.chainId,\n      name: network.name || \"unknown\"\n    });\n    if (network.chainId !== 31337) {\n      throw new Error(`Unexpected network chainId: ${network.chainId}. Expected 31337.`);\n    }\n  } catch (error) {\n    console.error(\"Failed to fetch network details:\", error);\n    throw error;\n  }\n\n  // 获取签名者\n  const signer = provider.getSigner();\n\n  // 确认合约地址是否正确\n  const contractAddress = process.env.REACT_APP_CONTRACT_ADDRESS;\n  if (!contractAddress) {\n    throw new Error(\"Contract address is not defined in .env file.\");\n  }\n\n  // 返回合约实例\n  return new ethers.Contract(contractAddress, JewelryCertificateABI, signer);\n};","map":{"version":3,"names":["ethers","JewelryCertificateABI","getContract","window","ethereum","Error","provider","providers","JsonRpcProvider","network","getNetwork","console","log","chainId","name","error","signer","getSigner","contractAddress","process","env","REACT_APP_CONTRACT_ADDRESS","Contract"],"sources":["/Users/sharb/Downloads/CCP_GPT_Adventure-main/frontend/src/contract.js"],"sourcesContent":["import { ethers } from \"ethers\";\nimport JewelryCertificateABI from \"./JewelryCertificateABI.json\";\n\nexport const getContract = async () => {\n    if (!window.ethereum) {\n        throw new Error(\"MetaMask is not installed. Please install it to use this feature.\");\n    }\n\n    // 连接到本地 JSON-RPC 提供程序\n    const provider = new ethers.providers.JsonRpcProvider(\"http://127.0.0.1:8545\");\n\n    try {\n        const network = await provider.getNetwork();\n        console.log(\"Connected to Network:\", {\n            chainId: network.chainId,\n            name: network.name || \"unknown\",\n        });\n\n        if (network.chainId !== 31337) {\n            throw new Error(`Unexpected network chainId: ${network.chainId}. Expected 31337.`);\n        }\n    } catch (error) {\n        console.error(\"Failed to fetch network details:\", error);\n        throw error;\n    }\n\n    // 获取签名者\n    const signer = provider.getSigner();\n\n    // 确认合约地址是否正确\n    const contractAddress = process.env.REACT_APP_CONTRACT_ADDRESS;\n    if (!contractAddress) {\n        throw new Error(\"Contract address is not defined in .env file.\");\n    }\n\n    // 返回合约实例\n    return new ethers.Contract(contractAddress, JewelryCertificateABI, signer);\n};\n"],"mappings":"AAAA,SAASA,MAAM,QAAQ,QAAQ;AAC/B,OAAOC,qBAAqB,MAAM,8BAA8B;AAEhE,OAAO,MAAMC,WAAW,GAAG,MAAAA,CAAA,KAAY;EACnC,IAAI,CAACC,MAAM,CAACC,QAAQ,EAAE;IAClB,MAAM,IAAIC,KAAK,CAAC,mEAAmE,CAAC;EACxF;;EAEA;EACA,MAAMC,QAAQ,GAAG,IAAIN,MAAM,CAACO,SAAS,CAACC,eAAe,CAAC,uBAAuB,CAAC;EAE9E,IAAI;IACA,MAAMC,OAAO,GAAG,MAAMH,QAAQ,CAACI,UAAU,CAAC,CAAC;IAC3CC,OAAO,CAACC,GAAG,CAAC,uBAAuB,EAAE;MACjCC,OAAO,EAAEJ,OAAO,CAACI,OAAO;MACxBC,IAAI,EAAEL,OAAO,CAACK,IAAI,IAAI;IAC1B,CAAC,CAAC;IAEF,IAAIL,OAAO,CAACI,OAAO,KAAK,KAAK,EAAE;MAC3B,MAAM,IAAIR,KAAK,CAAC,+BAA+BI,OAAO,CAACI,OAAO,mBAAmB,CAAC;IACtF;EACJ,CAAC,CAAC,OAAOE,KAAK,EAAE;IACZJ,OAAO,CAACI,KAAK,CAAC,kCAAkC,EAAEA,KAAK,CAAC;IACxD,MAAMA,KAAK;EACf;;EAEA;EACA,MAAMC,MAAM,GAAGV,QAAQ,CAACW,SAAS,CAAC,CAAC;;EAEnC;EACA,MAAMC,eAAe,GAAGC,OAAO,CAACC,GAAG,CAACC,0BAA0B;EAC9D,IAAI,CAACH,eAAe,EAAE;IAClB,MAAM,IAAIb,KAAK,CAAC,+CAA+C,CAAC;EACpE;;EAEA;EACA,OAAO,IAAIL,MAAM,CAACsB,QAAQ,CAACJ,eAAe,EAAEjB,qBAAqB,EAAEe,MAAM,CAAC;AAC9E,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}