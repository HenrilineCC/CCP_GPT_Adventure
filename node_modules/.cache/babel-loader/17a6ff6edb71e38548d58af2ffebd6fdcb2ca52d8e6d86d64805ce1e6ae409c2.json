{"ast":null,"code":"import { ethers } from \"ethers\";\nimport JewelryCertificateABI from \"./JewelryCertificateABI.json\";\nexport const getContract = async () => {\n  // 使用 Infura 的 Sepolia 网络\n  // const provider = new ethers.providers.JsonRpcProvider(\"https://sepolia.infura.io/v3/7528301bc9fe4be79a89e805a70e5eaa\");\n  const provider = new ethers.providers.JsonRpcProvider(\"http://127.0.0.1:8545\");\n  try {\n    const network = await provider.getNetwork();\n    console.log(\"Connected to Network:\", {\n      chainId: network.chainId,\n      name: network.name || \"unknown\"\n    });\n  } catch (error) {\n    console.error(\"Failed to fetch network details:\", error);\n    throw error;\n  }\n\n  // 确认环境变量中合约地址是否正确\n  const contractAddress = process.env.REACT_APP_CONTRACT_ADDRESS;\n  if (!contractAddress) {\n    throw new Error(\"Contract address is not defined in .env file.\");\n  }\n\n  // 禁用 ENS 功能，直接使用传入的地址\n  const signer = provider.getSigner(0);\n  return new ethers.Contract(contractAddress, JewelryCertificateABI, signer);\n};","map":{"version":3,"names":["ethers","JewelryCertificateABI","getContract","provider","providers","JsonRpcProvider","network","getNetwork","console","log","chainId","name","error","contractAddress","process","env","REACT_APP_CONTRACT_ADDRESS","Error","signer","getSigner","Contract"],"sources":["/Users/sharb/Downloads/CCP_GPT_Adventure-main/frontend/src/contract.js"],"sourcesContent":["import { ethers } from \"ethers\";\nimport JewelryCertificateABI from \"./JewelryCertificateABI.json\";\n\nexport const getContract = async () => {\n  // 使用 Infura 的 Sepolia 网络\n  // const provider = new ethers.providers.JsonRpcProvider(\"https://sepolia.infura.io/v3/7528301bc9fe4be79a89e805a70e5eaa\");\n  const provider = new ethers.providers.JsonRpcProvider(\"http://127.0.0.1:8545\");\n\n  try {\n    const network = await provider.getNetwork();\n    console.log(\"Connected to Network:\", {\n      chainId: network.chainId,\n      name: network.name || \"unknown\",\n    });\n  } catch (error) {\n    console.error(\"Failed to fetch network details:\", error);\n    throw error;\n  }\n\n  // 确认环境变量中合约地址是否正确\n  const contractAddress = process.env.REACT_APP_CONTRACT_ADDRESS;\n  if (!contractAddress) {\n    throw new Error(\"Contract address is not defined in .env file.\");\n  }\n\n  // 禁用 ENS 功能，直接使用传入的地址\n  const signer = provider.getSigner(0);\n  return new ethers.Contract(contractAddress, JewelryCertificateABI, signer);\n};\n"],"mappings":"AAAA,SAASA,MAAM,QAAQ,QAAQ;AAC/B,OAAOC,qBAAqB,MAAM,8BAA8B;AAEhE,OAAO,MAAMC,WAAW,GAAG,MAAAA,CAAA,KAAY;EACrC;EACA;EACA,MAAMC,QAAQ,GAAG,IAAIH,MAAM,CAACI,SAAS,CAACC,eAAe,CAAC,uBAAuB,CAAC;EAE9E,IAAI;IACF,MAAMC,OAAO,GAAG,MAAMH,QAAQ,CAACI,UAAU,CAAC,CAAC;IAC3CC,OAAO,CAACC,GAAG,CAAC,uBAAuB,EAAE;MACnCC,OAAO,EAAEJ,OAAO,CAACI,OAAO;MACxBC,IAAI,EAAEL,OAAO,CAACK,IAAI,IAAI;IACxB,CAAC,CAAC;EACJ,CAAC,CAAC,OAAOC,KAAK,EAAE;IACdJ,OAAO,CAACI,KAAK,CAAC,kCAAkC,EAAEA,KAAK,CAAC;IACxD,MAAMA,KAAK;EACb;;EAEA;EACA,MAAMC,eAAe,GAAGC,OAAO,CAACC,GAAG,CAACC,0BAA0B;EAC9D,IAAI,CAACH,eAAe,EAAE;IACpB,MAAM,IAAII,KAAK,CAAC,+CAA+C,CAAC;EAClE;;EAEA;EACA,MAAMC,MAAM,GAAGf,QAAQ,CAACgB,SAAS,CAAC,CAAC,CAAC;EACpC,OAAO,IAAInB,MAAM,CAACoB,QAAQ,CAACP,eAAe,EAAEZ,qBAAqB,EAAEiB,MAAM,CAAC;AAC5E,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}