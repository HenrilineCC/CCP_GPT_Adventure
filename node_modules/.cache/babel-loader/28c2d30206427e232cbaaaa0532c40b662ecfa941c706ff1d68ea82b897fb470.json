{"ast":null,"code":"import { ethers } from \"ethers\";\nimport JewelryCertificateABI from \"./JewelryCertificateABI.json\";\nexport const getContract = async () => {\n  if (!window.ethereum) {\n    throw new Error(\"MetaMask is not installed. Please install it to use this feature.\");\n  }\n\n  // 使用本地节点（例如 Hardhat/Ganache）\n  const provider = new ethers.providers.JsonRpcProvider(\"http://127.0.0.1:8545\"); // 默认端口\n  try {\n    // 打印网络信息\n    const network = await provider.getNetwork();\n    console.log(\"Provider Network:\", network);\n  } catch (error) {\n    console.error(\"Failed to fetch network information:\", error);\n    throw error; // 抛出错误供上层处理\n  }\n\n  // 获取签名者（第一个账户）\n  const signer = provider.getSigner(0);\n\n  // 从环境变量中获取合约地址\n  const contractAddress = process.env.REACT_APP_CONTRACT_ADDRESS; // 请确保 .env 文件中配置正确\n\n  // 返回合约实例\n  return new ethers.Contract(contractAddress, JewelryCertificateABI, signer);\n};","map":{"version":3,"names":["ethers","JewelryCertificateABI","getContract","window","ethereum","Error","provider","providers","JsonRpcProvider","network","getNetwork","console","log","error","signer","getSigner","contractAddress","process","env","REACT_APP_CONTRACT_ADDRESS","Contract"],"sources":["/Users/sharb/Downloads/CCP_GPT_Adventure-main/frontend/src/contract.js"],"sourcesContent":["import { ethers } from \"ethers\";\nimport JewelryCertificateABI from \"./JewelryCertificateABI.json\";\n\nexport const getContract = async () => {\n  if (!window.ethereum) {\n    throw new Error(\"MetaMask is not installed. Please install it to use this feature.\");\n  }\n\n  // 使用本地节点（例如 Hardhat/Ganache）\n  const provider = new ethers.providers.JsonRpcProvider(\"http://127.0.0.1:8545\"); // 默认端口\n  try {\n    // 打印网络信息\n    const network = await provider.getNetwork();\n    console.log(\"Provider Network:\", network);\n  } catch (error) {\n    console.error(\"Failed to fetch network information:\", error);\n    throw error; // 抛出错误供上层处理\n  }\n\n  // 获取签名者（第一个账户）\n  const signer = provider.getSigner(0);\n\n  // 从环境变量中获取合约地址\n  const contractAddress = process.env.REACT_APP_CONTRACT_ADDRESS; // 请确保 .env 文件中配置正确\n\n  // 返回合约实例\n  return new ethers.Contract(contractAddress, JewelryCertificateABI, signer);\n};\n"],"mappings":"AAAA,SAASA,MAAM,QAAQ,QAAQ;AAC/B,OAAOC,qBAAqB,MAAM,8BAA8B;AAEhE,OAAO,MAAMC,WAAW,GAAG,MAAAA,CAAA,KAAY;EACrC,IAAI,CAACC,MAAM,CAACC,QAAQ,EAAE;IACpB,MAAM,IAAIC,KAAK,CAAC,mEAAmE,CAAC;EACtF;;EAEA;EACA,MAAMC,QAAQ,GAAG,IAAIN,MAAM,CAACO,SAAS,CAACC,eAAe,CAAC,uBAAuB,CAAC,CAAC,CAAC;EAChF,IAAI;IACF;IACA,MAAMC,OAAO,GAAG,MAAMH,QAAQ,CAACI,UAAU,CAAC,CAAC;IAC3CC,OAAO,CAACC,GAAG,CAAC,mBAAmB,EAAEH,OAAO,CAAC;EAC3C,CAAC,CAAC,OAAOI,KAAK,EAAE;IACdF,OAAO,CAACE,KAAK,CAAC,sCAAsC,EAAEA,KAAK,CAAC;IAC5D,MAAMA,KAAK,CAAC,CAAC;EACf;;EAEA;EACA,MAAMC,MAAM,GAAGR,QAAQ,CAACS,SAAS,CAAC,CAAC,CAAC;;EAEpC;EACA,MAAMC,eAAe,GAAGC,OAAO,CAACC,GAAG,CAACC,0BAA0B,CAAC,CAAC;;EAEhE;EACA,OAAO,IAAInB,MAAM,CAACoB,QAAQ,CAACJ,eAAe,EAAEf,qBAAqB,EAAEa,MAAM,CAAC;AAC5E,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}