{"ast":null,"code":"import { ethers } from \"ethers\";\nimport JewelryCertificateABI from \"./JewelryCertificateABI.json\";\nexport const getContract = async () => {\n  // 检查是否安装了 MetaMask\n  if (!window.ethereum) {\n    throw new Error(\"MetaMask is not detected. Please install it to continue.\");\n  }\n  try {\n    // 使用 MetaMask 提供的 provider\n    const provider = new ethers.providers.Web3Provider(window.ethereum);\n\n    // 请求用户连接 MetaMask 钱包\n    await provider.send(\"eth_requestAccounts\", []);\n\n    // 获取签名者\n    const signer = provider.getSigner();\n\n    // 从环境变量获取合约地址\n    const contractAddress = process.env.REACT_APP_CONTRACT_ADDRESS;\n    if (!contractAddress) {\n      throw new Error(\"Contract address is not defined in the .env file.\");\n    }\n\n    // 创建并返回合约实例\n    return new ethers.Contract(contractAddress, JewelryCertificateABI, signer);\n  } catch (error) {\n    console.error(\"Failed to connect to MetaMask or fetch contract:\", error);\n    throw error;\n  }\n};","map":{"version":3,"names":["ethers","JewelryCertificateABI","getContract","window","ethereum","Error","provider","providers","Web3Provider","send","signer","getSigner","contractAddress","process","env","REACT_APP_CONTRACT_ADDRESS","Contract","error","console"],"sources":["/Users/sharb/Downloads/CCP_GPT_Adventure-main/frontend/src/contract.js"],"sourcesContent":["import { ethers } from \"ethers\";\nimport JewelryCertificateABI from \"./JewelryCertificateABI.json\";\n\nexport const getContract = async () => {\n  // 检查是否安装了 MetaMask\n  if (!window.ethereum) {\n    throw new Error(\"MetaMask is not detected. Please install it to continue.\");\n  }\n\n  try {\n    // 使用 MetaMask 提供的 provider\n    const provider = new ethers.providers.Web3Provider(window.ethereum);\n\n    // 请求用户连接 MetaMask 钱包\n    await provider.send(\"eth_requestAccounts\", []);\n\n    // 获取签名者\n    const signer = provider.getSigner();\n\n    // 从环境变量获取合约地址\n    const contractAddress = process.env.REACT_APP_CONTRACT_ADDRESS;\n    if (!contractAddress) {\n      throw new Error(\"Contract address is not defined in the .env file.\");\n    }\n\n    // 创建并返回合约实例\n    return new ethers.Contract(contractAddress, JewelryCertificateABI, signer);\n  } catch (error) {\n    console.error(\"Failed to connect to MetaMask or fetch contract:\", error);\n    throw error;\n  }\n};\n"],"mappings":"AAAA,SAASA,MAAM,QAAQ,QAAQ;AAC/B,OAAOC,qBAAqB,MAAM,8BAA8B;AAEhE,OAAO,MAAMC,WAAW,GAAG,MAAAA,CAAA,KAAY;EACrC;EACA,IAAI,CAACC,MAAM,CAACC,QAAQ,EAAE;IACpB,MAAM,IAAIC,KAAK,CAAC,0DAA0D,CAAC;EAC7E;EAEA,IAAI;IACF;IACA,MAAMC,QAAQ,GAAG,IAAIN,MAAM,CAACO,SAAS,CAACC,YAAY,CAACL,MAAM,CAACC,QAAQ,CAAC;;IAEnE;IACA,MAAME,QAAQ,CAACG,IAAI,CAAC,qBAAqB,EAAE,EAAE,CAAC;;IAE9C;IACA,MAAMC,MAAM,GAAGJ,QAAQ,CAACK,SAAS,CAAC,CAAC;;IAEnC;IACA,MAAMC,eAAe,GAAGC,OAAO,CAACC,GAAG,CAACC,0BAA0B;IAC9D,IAAI,CAACH,eAAe,EAAE;MACpB,MAAM,IAAIP,KAAK,CAAC,mDAAmD,CAAC;IACtE;;IAEA;IACA,OAAO,IAAIL,MAAM,CAACgB,QAAQ,CAACJ,eAAe,EAAEX,qBAAqB,EAAES,MAAM,CAAC;EAC5E,CAAC,CAAC,OAAOO,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,kDAAkD,EAAEA,KAAK,CAAC;IACxE,MAAMA,KAAK;EACb;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}