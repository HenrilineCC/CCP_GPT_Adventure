{"ast":null,"code":"var _jsxFileName = \"/Users/sharb/Downloads/CCP_GPT_Adventure-main/frontend/src/components/QueryLogEvents.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport { getContract } from \"../contract\";\nimport { ethers } from \"ethers\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction QueryLogEvents() {\n  _s();\n  const [tokenId, setTokenId] = useState(\"\");\n  const [logEvents, setLogEvents] = useState([]);\n  const [status, setStatus] = useState(\"\");\n  const [loading, setLoading] = useState(false);\n  const [currentUser, setCurrentUser] = useState(\"\"); // 当前用户地址\n  const [owner, setOwner] = useState(\"\"); // tokenId 所有者\n\n  // 获取当前用户地址\n  useEffect(() => {\n    const fetchCurrentUser = async () => {\n      try {\n        // 使用本地网络的 JSON RPC 提供者\n        const provider = new ethers.providers.JsonRpcProvider(\"http://127.0.0.1:8545\");\n\n        // 获取第一个本地账户作为当前用户\n        const accounts = await provider.listAccounts();\n        if (accounts.length > 0) {\n          setCurrentUser(accounts[0]);\n        } else {\n          setStatus(\"No accounts found in the local network. Please check your provider.\");\n        }\n      } catch (error) {\n        console.error(\"Error fetching current user:\", error);\n        setStatus(\"Failed to fetch current user. Ensure the local network is running.\");\n      }\n    };\n    fetchCurrentUser();\n  }, []);\n  const fetchLogEvents = async () => {\n    if (!tokenId || isNaN(tokenId)) {\n      setStatus(\"Please enter a valid Token ID.\");\n      return;\n    }\n    try {\n      setLoading(true);\n      setLogEvents([]); // 清空之前的查询结果\n      setStatus(\"Fetching log events...\");\n      const contract = await getContract();\n      console.log(\"Contract instance:\", contract);\n\n      // 获取 tokenId 的所有者\n      const tokenOwner = await contract.ownerOf(tokenId);\n      setOwner(tokenOwner);\n\n      // 检查当前用户是否是所有者\n      if (currentUser.toLowerCase() !== tokenOwner.toLowerCase()) {\n        setStatus(\"You are not the owner of this Token ID and cannot view events.\");\n        return; // 阻止继续调用 getEvents\n      }\n      setStatus(\"You are authorized to view events for this Token ID.\");\n\n      // 调用 getEvents 方法\n      const events = await contract.getEvents(tokenId);\n      console.log(\"Fetched events:\", events);\n      setLogEvents(events);\n      setStatus(`Successfully fetched ${events.length} events.`);\n    } catch (error) {\n      console.error(\"Error fetching events:\", error.message || error);\n      if (error.code === \"CALL_EXCEPTION\") {\n        setStatus(\"Token ID does not exist or cannot be fetched.\");\n      } else if (error.message.includes(\"Not authorized\")) {\n        setStatus(\"You are not authorized to view events for this Token ID.\");\n      } else {\n        setStatus(`Failed to fetch events: ${error.message || error}`);\n      }\n    } finally {\n      setLoading(false);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"component\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Query Log Events\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n        children: \"Current User:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 9\n      }, this), \" \", currentUser || \"Not connected to the local network\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      placeholder: \"Token ID\",\n      value: tokenId,\n      onChange: e => setTokenId(e.target.value)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: fetchLogEvents,\n      disabled: loading || !currentUser,\n      children: loading ? \"Fetching...\" : \"Fetch Events\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: status\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 7\n    }, this), owner && /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n        children: [\"Owner of Token ID \", tokenId, \":\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 11\n      }, this), \" \", owner]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 9\n    }, this), logEvents.length > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Log Events:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 107,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n        children: logEvents.map((event, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n          children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n            children: \"Description:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 111,\n            columnNumber: 17\n          }, this), \" \", event.description, \" \", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 111,\n            columnNumber: 67\n          }, this), /*#__PURE__*/_jsxDEV(\"strong\", {\n            children: \"Timestamp:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 112,\n            columnNumber: 17\n          }, this), \" \", new Date(event.timestamp * 1000).toLocaleString()]\n        }, index, true, {\n          fileName: _jsxFileName,\n          lineNumber: 110,\n          columnNumber: 15\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 84,\n    columnNumber: 5\n  }, this);\n}\n_s(QueryLogEvents, \"nklrnBWYqlXNLVVEkG2mOiLIQak=\");\n_c = QueryLogEvents;\nexport default QueryLogEvents;\nvar _c;\n$RefreshReg$(_c, \"QueryLogEvents\");","map":{"version":3,"names":["React","useState","useEffect","getContract","ethers","jsxDEV","_jsxDEV","QueryLogEvents","_s","tokenId","setTokenId","logEvents","setLogEvents","status","setStatus","loading","setLoading","currentUser","setCurrentUser","owner","setOwner","fetchCurrentUser","provider","providers","JsonRpcProvider","accounts","listAccounts","length","error","console","fetchLogEvents","isNaN","contract","log","tokenOwner","ownerOf","toLowerCase","events","getEvents","message","code","includes","className","children","fileName","_jsxFileName","lineNumber","columnNumber","type","placeholder","value","onChange","e","target","onClick","disabled","map","event","index","description","Date","timestamp","toLocaleString","_c","$RefreshReg$"],"sources":["/Users/sharb/Downloads/CCP_GPT_Adventure-main/frontend/src/components/QueryLogEvents.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport { getContract } from \"../contract\";\nimport { ethers } from \"ethers\";\n\nfunction QueryLogEvents() {\n  const [tokenId, setTokenId] = useState(\"\");\n  const [logEvents, setLogEvents] = useState([]);\n  const [status, setStatus] = useState(\"\");\n  const [loading, setLoading] = useState(false);\n  const [currentUser, setCurrentUser] = useState(\"\"); // 当前用户地址\n  const [owner, setOwner] = useState(\"\"); // tokenId 所有者\n\n  // 获取当前用户地址\n  useEffect(() => {\n    const fetchCurrentUser = async () => {\n      try {\n        // 使用本地网络的 JSON RPC 提供者\n        const provider = new ethers.providers.JsonRpcProvider(\"http://127.0.0.1:8545\");\n\n        // 获取第一个本地账户作为当前用户\n        const accounts = await provider.listAccounts();\n        if (accounts.length > 0) {\n          setCurrentUser(accounts[0]);\n        } else {\n          setStatus(\"No accounts found in the local network. Please check your provider.\");\n        }\n      } catch (error) {\n        console.error(\"Error fetching current user:\", error);\n        setStatus(\"Failed to fetch current user. Ensure the local network is running.\");\n      }\n    };\n\n    fetchCurrentUser();\n  }, []);\n\n  const fetchLogEvents = async () => {\n    if (!tokenId || isNaN(tokenId)) {\n      setStatus(\"Please enter a valid Token ID.\");\n      return;\n    }\n\n    try {\n      setLoading(true);\n      setLogEvents([]); // 清空之前的查询结果\n      setStatus(\"Fetching log events...\");\n\n      const contract = await getContract();\n      console.log(\"Contract instance:\", contract);\n\n      // 获取 tokenId 的所有者\n      const tokenOwner = await contract.ownerOf(tokenId);\n      setOwner(tokenOwner);\n\n      // 检查当前用户是否是所有者\n      if (currentUser.toLowerCase() !== tokenOwner.toLowerCase()) {\n        setStatus(\"You are not the owner of this Token ID and cannot view events.\");\n        return; // 阻止继续调用 getEvents\n      }\n\n      setStatus(\"You are authorized to view events for this Token ID.\");\n\n      // 调用 getEvents 方法\n      const events = await contract.getEvents(tokenId);\n      console.log(\"Fetched events:\", events);\n\n      setLogEvents(events);\n      setStatus(`Successfully fetched ${events.length} events.`);\n    } catch (error) {\n      console.error(\"Error fetching events:\", error.message || error);\n\n      if (error.code === \"CALL_EXCEPTION\") {\n        setStatus(\"Token ID does not exist or cannot be fetched.\");\n      } else if (error.message.includes(\"Not authorized\")) {\n        setStatus(\"You are not authorized to view events for this Token ID.\");\n      } else {\n        setStatus(`Failed to fetch events: ${error.message || error}`);\n      }\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  return (\n    <div className=\"component\">\n      <h2>Query Log Events</h2>\n      <p>\n        <strong>Current User:</strong>{\" \"}\n        {currentUser || \"Not connected to the local network\"}\n      </p>\n      <input\n        type=\"text\"\n        placeholder=\"Token ID\"\n        value={tokenId}\n        onChange={(e) => setTokenId(e.target.value)}\n      />\n      <button onClick={fetchLogEvents} disabled={loading || !currentUser}>\n        {loading ? \"Fetching...\" : \"Fetch Events\"}\n      </button>\n      <p>{status}</p>\n      {owner && (\n        <p>\n          <strong>Owner of Token ID {tokenId}:</strong> {owner}\n        </p>\n      )}\n      {logEvents.length > 0 && (\n        <div>\n          <h3>Log Events:</h3>\n          <ul>\n            {logEvents.map((event, index) => (\n              <li key={index}>\n                <strong>Description:</strong> {event.description} <br />\n                <strong>Timestamp:</strong>{\" \"}\n                {new Date(event.timestamp * 1000).toLocaleString()}\n              </li>\n            ))}\n          </ul>\n        </div>\n      )}\n    </div>\n  );\n}\n\nexport default QueryLogEvents;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}