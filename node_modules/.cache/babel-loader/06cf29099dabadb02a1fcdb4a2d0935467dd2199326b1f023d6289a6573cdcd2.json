{"ast":null,"code":"var _jsxFileName = \"/Users/sharb/Downloads/CCP_GPT_Adventure-main/frontend/src/components/CreateCertificate.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport { getContract } from \"../contract\";\nimport { ethers } from \"ethers\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction CreateCertificate() {\n  _s();\n  const [tokenId, setTokenId] = useState(\"\");\n  const [owner, setOwner] = useState(\"\");\n  const [status, setStatus] = useState(\"\");\n  const createCertificate = async () => {\n    try {\n      const contract = getContract();\n      console.log(\"Contract instance:\", contract);\n\n      // 检查地址是否有效\n      if (!ethers.utils.isAddress(owner)) {\n        throw new Error(\"Invalid Ethereum address format.\");\n      }\n      const tx = await contract.createCertificate(tokenId, owner);\n      console.log(\"Transaction sent:\", tx);\n      const receipt = await tx.wait();\n      console.log(\"Transaction confirmed:\", receipt);\n      setStatus(`Certificate ${tokenId} created successfully for ${owner}!`);\n    } catch (error) {\n      console.error(\"Error creating certificate:\", error);\n      if (error.code === \"UNSUPPORTED_OPERATION\") {\n        setStatus(\"Local network does not support ENS. Provide a valid Ethereum address.\");\n      } else {\n        setStatus(`Failed to create certificate. Error: ${error.message}`);\n      }\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"component\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Create Certificate\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      placeholder: \"Token ID\",\n      value: tokenId,\n      onChange: e => setTokenId(e.target.value)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      placeholder: \"Owner Address\",\n      value: owner,\n      onChange: e => setOwner(e.target.value)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: createCertificate,\n      children: \"Create\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: status\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 39,\n    columnNumber: 5\n  }, this);\n}\n_s(CreateCertificate, \"5TXhnXGIcYBYH0UrzjoClO0nYbU=\");\n_c = CreateCertificate;\nexport default CreateCertificate;\nvar _c;\n$RefreshReg$(_c, \"CreateCertificate\");","map":{"version":3,"names":["React","useState","getContract","ethers","jsxDEV","_jsxDEV","CreateCertificate","_s","tokenId","setTokenId","owner","setOwner","status","setStatus","createCertificate","contract","console","log","utils","isAddress","Error","tx","receipt","wait","error","code","message","className","children","fileName","_jsxFileName","lineNumber","columnNumber","type","placeholder","value","onChange","e","target","onClick","_c","$RefreshReg$"],"sources":["/Users/sharb/Downloads/CCP_GPT_Adventure-main/frontend/src/components/CreateCertificate.js"],"sourcesContent":["import React, { useState } from \"react\";\nimport { getContract } from \"../contract\";\nimport { ethers } from \"ethers\";\n\nfunction CreateCertificate() {\n  const [tokenId, setTokenId] = useState(\"\");\n  const [owner, setOwner] = useState(\"\");\n  const [status, setStatus] = useState(\"\");\n\n  const createCertificate = async () => {\n    try {\n      const contract = getContract();\n      console.log(\"Contract instance:\", contract);\n\n      // 检查地址是否有效\n      if (!ethers.utils.isAddress(owner)) {\n        throw new Error(\"Invalid Ethereum address format.\");\n      }\n\n      const tx = await contract.createCertificate(tokenId, owner);\n      console.log(\"Transaction sent:\", tx);\n\n      const receipt = await tx.wait();\n      console.log(\"Transaction confirmed:\", receipt);\n\n      setStatus(`Certificate ${tokenId} created successfully for ${owner}!`);\n    } catch (error) {\n      console.error(\"Error creating certificate:\", error);\n\n      if (error.code === \"UNSUPPORTED_OPERATION\") {\n        setStatus(\"Local network does not support ENS. Provide a valid Ethereum address.\");\n      } else {\n        setStatus(`Failed to create certificate. Error: ${error.message}`);\n      }\n    }\n  };\n\n  return (\n    <div className=\"component\">\n      <h2>Create Certificate</h2>\n      <input\n        type=\"text\"\n        placeholder=\"Token ID\"\n        value={tokenId}\n        onChange={(e) => setTokenId(e.target.value)}\n      />\n      <input\n        type=\"text\"\n        placeholder=\"Owner Address\"\n        value={owner}\n        onChange={(e) => setOwner(e.target.value)}\n      />\n      <button onClick={createCertificate}>Create</button>\n      <p>{status}</p>\n    </div>\n  );\n}\n\nexport default CreateCertificate;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,SAASC,WAAW,QAAQ,aAAa;AACzC,SAASC,MAAM,QAAQ,QAAQ;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEhC,SAASC,iBAAiBA,CAAA,EAAG;EAAAC,EAAA;EAC3B,MAAM,CAACC,OAAO,EAAEC,UAAU,CAAC,GAAGR,QAAQ,CAAC,EAAE,CAAC;EAC1C,MAAM,CAACS,KAAK,EAAEC,QAAQ,CAAC,GAAGV,QAAQ,CAAC,EAAE,CAAC;EACtC,MAAM,CAACW,MAAM,EAAEC,SAAS,CAAC,GAAGZ,QAAQ,CAAC,EAAE,CAAC;EAExC,MAAMa,iBAAiB,GAAG,MAAAA,CAAA,KAAY;IACpC,IAAI;MACF,MAAMC,QAAQ,GAAGb,WAAW,CAAC,CAAC;MAC9Bc,OAAO,CAACC,GAAG,CAAC,oBAAoB,EAAEF,QAAQ,CAAC;;MAE3C;MACA,IAAI,CAACZ,MAAM,CAACe,KAAK,CAACC,SAAS,CAACT,KAAK,CAAC,EAAE;QAClC,MAAM,IAAIU,KAAK,CAAC,kCAAkC,CAAC;MACrD;MAEA,MAAMC,EAAE,GAAG,MAAMN,QAAQ,CAACD,iBAAiB,CAACN,OAAO,EAAEE,KAAK,CAAC;MAC3DM,OAAO,CAACC,GAAG,CAAC,mBAAmB,EAAEI,EAAE,CAAC;MAEpC,MAAMC,OAAO,GAAG,MAAMD,EAAE,CAACE,IAAI,CAAC,CAAC;MAC/BP,OAAO,CAACC,GAAG,CAAC,wBAAwB,EAAEK,OAAO,CAAC;MAE9CT,SAAS,CAAC,eAAeL,OAAO,6BAA6BE,KAAK,GAAG,CAAC;IACxE,CAAC,CAAC,OAAOc,KAAK,EAAE;MACdR,OAAO,CAACQ,KAAK,CAAC,6BAA6B,EAAEA,KAAK,CAAC;MAEnD,IAAIA,KAAK,CAACC,IAAI,KAAK,uBAAuB,EAAE;QAC1CZ,SAAS,CAAC,uEAAuE,CAAC;MACpF,CAAC,MAAM;QACLA,SAAS,CAAC,wCAAwCW,KAAK,CAACE,OAAO,EAAE,CAAC;MACpE;IACF;EACF,CAAC;EAED,oBACErB,OAAA;IAAKsB,SAAS,EAAC,WAAW;IAAAC,QAAA,gBACxBvB,OAAA;MAAAuB,QAAA,EAAI;IAAkB;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eAC3B3B,OAAA;MACE4B,IAAI,EAAC,MAAM;MACXC,WAAW,EAAC,UAAU;MACtBC,KAAK,EAAE3B,OAAQ;MACf4B,QAAQ,EAAGC,CAAC,IAAK5B,UAAU,CAAC4B,CAAC,CAACC,MAAM,CAACH,KAAK;IAAE;MAAAN,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAC7C,CAAC,eACF3B,OAAA;MACE4B,IAAI,EAAC,MAAM;MACXC,WAAW,EAAC,eAAe;MAC3BC,KAAK,EAAEzB,KAAM;MACb0B,QAAQ,EAAGC,CAAC,IAAK1B,QAAQ,CAAC0B,CAAC,CAACC,MAAM,CAACH,KAAK;IAAE;MAAAN,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAC3C,CAAC,eACF3B,OAAA;MAAQkC,OAAO,EAAEzB,iBAAkB;MAAAc,QAAA,EAAC;IAAM;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ,CAAC,eACnD3B,OAAA;MAAAuB,QAAA,EAAIhB;IAAM;MAAAiB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACZ,CAAC;AAEV;AAACzB,EAAA,CApDQD,iBAAiB;AAAAkC,EAAA,GAAjBlC,iBAAiB;AAsD1B,eAAeA,iBAAiB;AAAC,IAAAkC,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}