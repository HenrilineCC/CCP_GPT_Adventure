{"ast":null,"code":"export const getContract = async () => {\n  if (!window.ethereum) {\n    throw new Error(\"MetaMask is not installed. Please install it to use this feature.\");\n  }\n\n  // 连接本地网络\n  const provider = new ethers.providers.JsonRpcProvider(\"http://127.0.0.1:8545\");\n  try {\n    const network = await provider.getNetwork();\n    console.log(\"Connected to Network:\", {\n      chainId: network.chainId,\n      name: network.name || \"unknown\"\n    });\n  } catch (error) {\n    console.error(\"Failed to fetch network details:\", error);\n    throw error;\n  }\n\n  // 获取签名者\n  const signer = provider.getSigner(0);\n\n  // 确认环境变量中合约地址是否正确\n  const contractAddress = process.env.REACT_APP_CONTRACT_ADDRESS;\n  if (!contractAddress) {\n    throw new Error(\"Contract address is not defined in .env file.\");\n  }\n\n  // 返回合约实例\n  return new ethers.Contract(contractAddress, JewelryCertificateABI, signer);\n};","map":{"version":3,"names":["getContract","window","ethereum","Error","provider","ethers","providers","JsonRpcProvider","network","getNetwork","console","log","chainId","name","error","signer","getSigner","contractAddress","process","env","REACT_APP_CONTRACT_ADDRESS","Contract","JewelryCertificateABI"],"sources":["/Users/sharb/Downloads/CCP_GPT_Adventure-main/frontend/src/contract.js"],"sourcesContent":["export const getContract = async () => {\n    if (!window.ethereum) {\n      throw new Error(\"MetaMask is not installed. Please install it to use this feature.\");\n    }\n  \n    // 连接本地网络\n    const provider = new ethers.providers.JsonRpcProvider(\"http://127.0.0.1:8545\");\n  \n    try {\n      const network = await provider.getNetwork();\n      console.log(\"Connected to Network:\", {\n        chainId: network.chainId,\n        name: network.name || \"unknown\",\n      });\n    } catch (error) {\n      console.error(\"Failed to fetch network details:\", error);\n      throw error;\n    }\n  \n    // 获取签名者\n    const signer = provider.getSigner(0);\n  \n    // 确认环境变量中合约地址是否正确\n    const contractAddress = process.env.REACT_APP_CONTRACT_ADDRESS;\n    if (!contractAddress) {\n      throw new Error(\"Contract address is not defined in .env file.\");\n    }\n  \n    // 返回合约实例\n    return new ethers.Contract(contractAddress, JewelryCertificateABI, signer);\n  };\n  "],"mappings":"AAAA,OAAO,MAAMA,WAAW,GAAG,MAAAA,CAAA,KAAY;EACnC,IAAI,CAACC,MAAM,CAACC,QAAQ,EAAE;IACpB,MAAM,IAAIC,KAAK,CAAC,mEAAmE,CAAC;EACtF;;EAEA;EACA,MAAMC,QAAQ,GAAG,IAAIC,MAAM,CAACC,SAAS,CAACC,eAAe,CAAC,uBAAuB,CAAC;EAE9E,IAAI;IACF,MAAMC,OAAO,GAAG,MAAMJ,QAAQ,CAACK,UAAU,CAAC,CAAC;IAC3CC,OAAO,CAACC,GAAG,CAAC,uBAAuB,EAAE;MACnCC,OAAO,EAAEJ,OAAO,CAACI,OAAO;MACxBC,IAAI,EAAEL,OAAO,CAACK,IAAI,IAAI;IACxB,CAAC,CAAC;EACJ,CAAC,CAAC,OAAOC,KAAK,EAAE;IACdJ,OAAO,CAACI,KAAK,CAAC,kCAAkC,EAAEA,KAAK,CAAC;IACxD,MAAMA,KAAK;EACb;;EAEA;EACA,MAAMC,MAAM,GAAGX,QAAQ,CAACY,SAAS,CAAC,CAAC,CAAC;;EAEpC;EACA,MAAMC,eAAe,GAAGC,OAAO,CAACC,GAAG,CAACC,0BAA0B;EAC9D,IAAI,CAACH,eAAe,EAAE;IACpB,MAAM,IAAId,KAAK,CAAC,+CAA+C,CAAC;EAClE;;EAEA;EACA,OAAO,IAAIE,MAAM,CAACgB,QAAQ,CAACJ,eAAe,EAAEK,qBAAqB,EAAEP,MAAM,CAAC;AAC5E,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}