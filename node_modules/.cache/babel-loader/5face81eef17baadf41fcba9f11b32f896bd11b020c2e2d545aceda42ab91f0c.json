{"ast":null,"code":"var _jsxFileName = \"/Users/sharb/Downloads/CCP_GPT_Adventure-main/frontend/src/components/LogEvent.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport { ethers } from \"ethers\";\nimport { getContract } from \"../contract\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction LogEvent() {\n  _s();\n  const [tokenId, setTokenId] = useState(\"\");\n  const [description, setDescription] = useState(\"\");\n  const [status, setStatus] = useState(\"\");\n  const [loading, setLoading] = useState(false);\n  const logEvent = async () => {\n    if (!tokenId || !description) {\n      setStatus(\"Token ID and Event Description are required.\");\n      return;\n    }\n    setLoading(true);\n    setStatus(\"Processing event log...\");\n    try {\n      const contract = await getContract();\n\n      // 调用智能合约的 logEvent 方法\n      const tx = await contract.logEvent(tokenId, description);\n      console.log(\"Transaction sent:\", tx);\n\n      // 等待交易完成\n      await tx.wait();\n      console.log(\"Transaction confirmed:\", tx);\n      setStatus(`Event logged for Token ID ${tokenId}: \"${description}\"`);\n    } catch (error) {\n      console.error(\"Error logging event:\", error.message || error);\n      setStatus(`Failed to log event: ${error.message || error}`);\n    } finally {\n      setLoading(false);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"component\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Log Event\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      placeholder: \"Token ID\",\n      value: tokenId,\n      onChange: e => setTokenId(e.target.value),\n      disabled: loading\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      placeholder: \"Event Description\",\n      value: description,\n      onChange: e => setDescription(e.target.value),\n      disabled: loading\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: logEvent,\n      disabled: loading,\n      children: loading ? \"Logging...\" : \"Log Event\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: status\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 41,\n    columnNumber: 5\n  }, this);\n}\n_s(LogEvent, \"aQc/rXDe6eVNMwtkwbwnH9/9sE4=\");\n_c = LogEvent;\nexport default LogEvent;\nvar _c;\n$RefreshReg$(_c, \"LogEvent\");","map":{"version":3,"names":["React","useState","ethers","getContract","jsxDEV","_jsxDEV","LogEvent","_s","tokenId","setTokenId","description","setDescription","status","setStatus","loading","setLoading","logEvent","contract","tx","console","log","wait","error","message","className","children","fileName","_jsxFileName","lineNumber","columnNumber","type","placeholder","value","onChange","e","target","disabled","onClick","_c","$RefreshReg$"],"sources":["/Users/sharb/Downloads/CCP_GPT_Adventure-main/frontend/src/components/LogEvent.js"],"sourcesContent":["import React, { useState } from \"react\";\nimport { ethers } from \"ethers\";\nimport { getContract } from \"../contract\";\n\nfunction LogEvent() {\n  const [tokenId, setTokenId] = useState(\"\");\n  const [description, setDescription] = useState(\"\");\n  const [status, setStatus] = useState(\"\");\n  const [loading, setLoading] = useState(false);\n\n  const logEvent = async () => {\n    if (!tokenId || !description) {\n      setStatus(\"Token ID and Event Description are required.\");\n      return;\n    }\n\n    setLoading(true);\n    setStatus(\"Processing event log...\");\n\n    try {\n      const contract = await getContract();\n\n      // 调用智能合约的 logEvent 方法\n      const tx = await contract.logEvent(tokenId, description);\n      console.log(\"Transaction sent:\", tx);\n\n      // 等待交易完成\n      await tx.wait();\n      console.log(\"Transaction confirmed:\", tx);\n\n      setStatus(`Event logged for Token ID ${tokenId}: \"${description}\"`);\n    } catch (error) {\n      console.error(\"Error logging event:\", error.message || error);\n      setStatus(`Failed to log event: ${error.message || error}`);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  return (\n    <div className=\"component\">\n      <h2>Log Event</h2>\n      <input\n        type=\"text\"\n        placeholder=\"Token ID\"\n        value={tokenId}\n        onChange={(e) => setTokenId(e.target.value)}\n        disabled={loading}\n      />\n      <input\n        type=\"text\"\n        placeholder=\"Event Description\"\n        value={description}\n        onChange={(e) => setDescription(e.target.value)}\n        disabled={loading}\n      />\n      <button onClick={logEvent} disabled={loading}>\n        {loading ? \"Logging...\" : \"Log Event\"}\n      </button>\n      <p>{status}</p>\n    </div>\n  );\n}\n\nexport default LogEvent;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}